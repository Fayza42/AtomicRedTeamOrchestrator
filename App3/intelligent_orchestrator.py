# Notebook 06: Orchestrateur Intelligent Multi-Agents
# Filename: notebook_06_orchestrator.ipynb

# %% [markdown]
"""
# Orchestrateur Intelligent - √âcosyst√®me de Pentesting Autonome

## Architecture Multi-Agents :
- üéØ **Phase 1 - Analyse** : VulnerabilityAnalyzerAgent
- üî¥ **Phase 2 - Attaque** : RedTeamAgent  
- üîµ **Phase 3 - D√©fense** : BlueTeamAgent
- üîÑ **Cycle It√©ratif** : Jusqu'√† rem√©diation compl√®te

## Fonctionnalit√©s Avanc√©es :
- ‚úÖ Gestion d'√©tat avec contexte persistant
- ‚úÖ Workflow intelligent avec transitions conditionnelles
- ‚úÖ Interface utilisateur interactive
- ‚úÖ Rapports consolid√©s et m√©triques
- ‚úÖ D√©tection automatique de rem√©diation
- ‚úÖ Logs d√©taill√©s et tra√ßabilit√©

## Workflow Orchestrateur :
1. **Initialisation** : Configuration et validation de l'environnement
2. **Input Utilisateur** : ID Vulhub + adresse cible
3. **Phase Analyse** : Analyse de vuln√©rabilit√© avec RAG Vulhub
4. **Phase Red Team** : G√©n√©ration et ex√©cution d'exploits
5. **Phase Blue Team** : Analyse d√©fensive et rem√©diation
6. **√âvaluation** : V√©rification si la vuln√©rabilit√© persiste
7. **It√©ration** : R√©p√©tition jusqu'√† s√©curisation compl√®te
"""

# %%
import os
import json
import time
import sys
from typing import Dict, List, Any, Optional, Tuple
from datetime import datetime, timedelta
from pathlib import Path
import subprocess
from dataclasses import dataclass, asdict
from enum import Enum
import uuid

# Interface utilisateur
try:
    import questionary
except ImportError:
    print("Installation de questionary pour l'interface interactive...")
    subprocess.check_call([sys.executable, "-m", "pip", "install", "questionary"])
    import questionary

# Imports des agents (en supposant qu'ils sont dans le m√™me environnement)
print("üé≠ Initialisation de l'Orchestrateur Multi-Agents...")

# %%
# Mod√®les de donn√©es pour l'orchestrateur
class AuditPhase(Enum):
    """√ânum√©ration des phases d'audit"""
    INITIALIZATION = "initialization"
    ANALYSIS = "analysis"
    RED_TEAM = "red_team"
    BLUE_TEAM = "blue_team"
    EVALUATION = "evaluation"
    COMPLETED = "completed"
    FAILED = "failed"

@dataclass
class AuditContext:
    """Contexte global de l'audit maintenu par l'orchestrateur"""
    
    # Identifiants
    audit_id: str
    vulhub_id: str
    target_address: str
    
    # √âtat de l'audit
    current_phase: AuditPhase
    start_time: datetime
    total_cycles: int
    
    # Rapports des agents
    analysis_reports: List[Dict[str, Any]]
    exploitation_reports: List[Dict[str, Any]]
    defense_reports: List[Dict[str, Any]]
    
    # M√©triques et √©tat
    vulnerability_status: str  # VULNERABLE, PARTIALLY_SECURED, SECURED
    risk_score_evolution: List[float]
    remediation_applied: List[str]
    
    # Configuration
    max_cycles: int = 5
    auto_apply_patches: bool = False
    
    def to_dict(self) -> Dict[str, Any]:
        """Conversion en dictionnaire pour s√©rialisation"""
        context_dict = asdict(self)
        context_dict['current_phase'] = self.current_phase.value
        context_dict['start_time'] = self.start_time.isoformat()
        return context_dict
    
    def get_latest_analysis(self) -> Optional[Dict[str, Any]]:
        """R√©cup√®re le dernier rapport d'analyse"""
        return self.analysis_reports[-1] if self.analysis_reports else None
    
    def get_latest_exploitation(self) -> Optional[Dict[str, Any]]:
        """R√©cup√®re le dernier rapport d'exploitation"""
        return self.exploitation_reports[-1] if self.exploitation_reports else None
    
    def get_latest_defense(self) -> Optional[Dict[str, Any]]:
        """R√©cup√®re le dernier rapport de d√©fense"""
        return self.defense_reports[-1] if self.defense_reports else None

print("‚úÖ Mod√®les de donn√©es d√©finis")

# %%
# Gestionnaire de configuration et environnement
class EnvironmentManager:
    """Gestionnaire de l'environnement et de la configuration"""
    
    def __init__(self):
        self.config_file = "vple_config.json"
        self.config = self._load_config()
    
    def _load_config(self) -> Dict[str, Any]:
        """Charge la configuration syst√®me"""
        try:
            with open(self.config_file, 'r') as f:
                config = json.load(f)
            print("‚úÖ Configuration syst√®me charg√©e")
            return config
        except FileNotFoundError:
            print("‚ö† Configuration non trouv√©e, utilisation des valeurs par d√©faut")
            return {
                "confirmed_model": "llama2:7b",
                "vulhub_rag_setup": {"db_path": "./vulhub_chroma_db"},
                "enhanced_rag_setup": {"vector_db": "./enhanced_vple_chroma_db"}
            }
    
    def validate_environment(self) -> Tuple[bool, List[str]]:
        """Valide que l'environnement est pr√™t pour l'orchestration"""
        errors = []
        
        # V√©rification du mod√®le LLM
        model_name = self.config.get("confirmed_model")
        if not model_name:
            errors.append("Mod√®le LLM non configur√©")
        
        # V√©rification des bases de donn√©es RAG
        vulhub_db = self.config.get("vulhub_rag_setup", {}).get("db_path")
        if not vulhub_db or not Path(vulhub_db).exists():
            errors.append(f"Base de donn√©es Vulhub non trouv√©e: {vulhub_db}")
        
        enhanced_db = self.config.get("enhanced_rag_setup", {}).get("vector_db")
        if not enhanced_db or not Path(enhanced_db).exists():
            errors.append(f"Base de donn√©es Enhanced non trouv√©e: {enhanced_db}")
        
        # V√©rification d'Ollama
        try:
            result = subprocess.run(["ollama", "list"], capture_output=True, text=True, timeout=5)
            if result.returncode != 0:
                errors.append("Service Ollama non accessible")
            elif model_name and model_name not in result.stdout:
                errors.append(f"Mod√®le {model_name} non disponible dans Ollama")
        except (subprocess.TimeoutExpired, FileNotFoundError):
            errors.append("Ollama non install√© ou non d√©marr√©")
        
        # V√©rification des r√©pertoires de travail
        work_dirs = ["generated_exploits", "audit_reports", "cycles_history"]
        for dir_name in work_dirs:
            Path(dir_name).mkdir(exist_ok=True)
        
        return len(errors) == 0, errors
    
    def get_agent_config(self, agent_type: str) -> Dict[str, Any]:
        """R√©cup√®re la configuration sp√©cifique pour un agent"""
        base_config = {
            "model_name": self.config.get("confirmed_model", "llama2:7b")
        }
        
        if agent_type == "vulnerability_analyzer":
            base_config["vulhub_db_path"] = self.config.get("vulhub_rag_setup", {}).get("db_path")
        elif agent_type == "red_team":
            base_config["enhanced_db_path"] = self.config.get("enhanced_rag_setup", {}).get("vector_db")
        
        return base_config

print("‚úÖ EnvironmentManager d√©fini")

# %%
# Interface utilisateur interactive
class UserInterface:
    """Interface utilisateur pour l'orchestrateur"""
    
    @staticmethod
    def welcome_banner():
        """Affiche la banni√®re de bienvenue"""
        print("\n" + "üé≠" * 25)
        print("üé≠  √âCOSYST√àME DE PENTESTING AUTONOME  üé≠")
        print("üé≠" * 25)
        print("üéØ Phase 1: Analyse de Vuln√©rabilit√©")
        print("üî¥ Phase 2: Exploitation Red Team")
        print("üîµ Phase 3: D√©fense Blue Team")
        print("üîÑ Cycles: Jusqu'√† rem√©diation compl√®te")
        print("=" * 50)
    
    @staticmethod
    def get_target_information() -> Tuple[str, str]:
        """R√©cup√®re les informations de la cible via interface interactive"""
        print("\nüìã Configuration de l'audit...")
        
        # Liste des vuln√©rabilit√©s Vulhub populaires
        popular_vulhubs = [
            "apache/CVE-2021-41773",
            "struts2/s2-001", 
            "struts2/s2-045",
            "tomcat/CVE-2017-12615",
            "weblogic/CVE-2017-10271",
            "drupal/CVE-2018-7600",
            "wordpress/CVE-2019-8943",
            "joomla/CVE-2015-8562",
            "Autre (saisie manuelle)"
        ]
        
        # S√©lection de la vuln√©rabilit√©
        vulhub_choice = questionary.select(
            "Quelle vuln√©rabilit√© Vulhub voulez-vous auditer ?",
            choices=popular_vulhubs
        ).ask()
        
        if vulhub_choice == "Autre (saisie manuelle)":
            vulhub_id = questionary.text(
                "Entrez l'ID Vulhub (format: service/vulnerability):",
                validate=lambda x: len(x.split('/')) == 2 if x else False
            ).ask()
        else:
            vulhub_id = vulhub_choice
        
        # Adresse de la cible
        target_address = questionary.text(
            "Entrez l'adresse de la cible (IP:PORT ou URL compl√®te):",
            default="192.168.1.100:8080",
            validate=lambda x: bool(x and ('.' in x or ':' in x))
        ).ask()
        
        # Confirmation
        print(f"\n‚úÖ Configuration:")
        print(f"   üéØ Vuln√©rabilit√©: {vulhub_id}")
        print(f"   üåê Cible: {target_address}")
        
        confirm = questionary.confirm("Confirmer cette configuration ?").ask()
        
        if not confirm:
            print("‚ùå Configuration annul√©e")
            return None, None
        
        return vulhub_id, target_address
    
    @staticmethod
    def get_audit_options() -> Dict[str, Any]:
        """R√©cup√®re les options d'audit avanc√©es"""
        print("\n‚öôÔ∏è Options d'audit avanc√©es...")
        
        max_cycles = questionary.select(
            "Nombre maximum de cycles Red Team vs Blue Team ?",
            choices=["3", "5", "10", "Illimit√©"]
        ).ask()
        
        max_cycles = 999 if max_cycles == "Illimit√©" else int(max_cycles)
        
        auto_patch = questionary.confirm(
            "Appliquer automatiquement les patches recommand√©s ?"
        ).ask()
        
        verbose_logs = questionary.confirm(
            "Activer les logs d√©taill√©s ?"
        ).ask()
        
        return {
            "max_cycles": max_cycles,
            "auto_apply_patches": auto_patch,
            "verbose_logs": verbose_logs
        }
    
    @staticmethod
    def display_phase_transition(from_phase: AuditPhase, to_phase: AuditPhase, cycle: int):
        """Affiche la transition entre phases"""
        phase_icons = {
            AuditPhase.ANALYSIS: "üéØ",
            AuditPhase.RED_TEAM: "üî¥",
            AuditPhase.BLUE_TEAM: "üîµ",
            AuditPhase.EVALUATION: "üìä"
        }
        
        print(f"\n{'='*50}")
        print(f"üîÑ CYCLE {cycle} - TRANSITION DE PHASE")
        print(f"{phase_icons.get(from_phase, '‚ùì')} {from_phase.value.upper()} ‚Üí {phase_icons.get(to_phase, '‚ùì')} {to_phase.value.upper()}")
        print(f"{'='*50}")
    
    @staticmethod
    def display_cycle_summary(context: AuditContext, cycle: int):
        """Affiche le r√©sum√© d'un cycle"""
        print(f"\nüìä R√âSUM√â DU CYCLE {cycle}")
        print("-" * 30)
        
        latest_analysis = context.get_latest_analysis()
        latest_exploitation = context.get_latest_exploitation()
        latest_defense = context.get_latest_defense()
        
        if latest_analysis:
            confidence = latest_analysis.get('analysis_report', {}).get('confidence_score', 0)
            print(f"üéØ Analyse: Confiance {confidence:.2f}")
        
        if latest_exploitation:
            success = latest_exploitation.get('exploitation_report', {}).get('success_level', 'UNKNOWN')
            print(f"üî¥ Exploitation: {success}")
        
        if latest_defense:
            risk_level = latest_defense.get('defense_report', {}).get('risk_assessment', {}).get('risk_level', 'UNKNOWN')
            recommendations = len(latest_defense.get('defense_report', {}).get('defense_recommendations', []))
            print(f"üîµ D√©fense: Risque {risk_level}, {recommendations} recommandations")
        
        print(f"üîÑ Statut vuln√©rabilit√©: {context.vulnerability_status}")

print("‚úÖ UserInterface d√©finie")

# %%
# Orchestrateur Principal
class IntelligentOrchestrator:
    """
    Orchestrateur intelligent pour l'√©cosyst√®me de pentesting autonome
    """
    
    def __init__(self):
        print("üé≠ Initialisation de l'Orchestrateur Intelligent...")
        
        # Gestionnaires
        self.env_manager = EnvironmentManager()
        self.ui = UserInterface()
        
        # √âtat de l'orchestrateur
        self.current_context: Optional[AuditContext] = None
        self.agents_cache = {}  # Cache des agents initialis√©s
        
        # Logs et rapports
        self.session_logs = []
        
        print("  ‚úÖ Orchestrateur initialis√©")
    
    def validate_environment(self) -> bool:
        """Valide l'environnement avant de commencer"""
        print("üîç Validation de l'environnement...")
        
        is_valid, errors = self.env_manager.validate_environment()
        
        if is_valid:
            print("‚úÖ Environnement valid√©")
            return True
        else:
            print("‚ùå Probl√®mes d√©tect√©s dans l'environnement:")
            for error in errors:
                print(f"  - {error}")
            
            fix_attempt = questionary.confirm(
                "Voulez-vous tenter une correction automatique ?"
            ).ask()
            
            if fix_attempt:
                return self._attempt_environment_fix(errors)
            
            return False
    
    def _attempt_environment_fix(self, errors: List[str]) -> bool:
        """Tente de corriger automatiquement les probl√®mes d'environnement"""
        print("üîß Tentative de correction automatique...")
        
        fixed_count = 0
        
        for error in errors:
            if "Ollama non install√©" in error:
                print("  üîß Tentative d'installation d'Ollama...")
                # Code de correction ici
                
            elif "Base de donn√©es" in error and "non trouv√©e" in error:
                print(f"  üîß Tentative de cr√©ation de la base de donn√©es...")
                # Code de correction ici
                
            elif "Mod√®le" in error and "non disponible" in error:
                print(f"  üîß Tentative de t√©l√©chargement du mod√®le...")
                # Code de correction ici
        
        # Re-validation
        is_valid, remaining_errors = self.env_manager.validate_environment()
        
        if is_valid:
            print(f"‚úÖ Environnement corrig√© ({fixed_count} probl√®mes r√©solus)")
            return True
        else:
            print(f"‚ö† Correction partielle ({fixed_count} probl√®mes r√©solus, {len(remaining_errors)} restants)")
            return False
    
    def initialize_audit_context(self, vulhub_id: str, target_address: str, options: Dict[str, Any]) -> AuditContext:
        """Initialise le contexte d'audit"""
        print("üìã Initialisation du contexte d'audit...")
        
        context = AuditContext(
            audit_id=str(uuid.uuid4())[:8],
            vulhub_id=vulhub_id,
            target_address=target_address,
            current_phase=AuditPhase.INITIALIZATION,
            start_time=datetime.now(),
            total_cycles=0,
            analysis_reports=[],
            exploitation_reports=[],
            defense_reports=[],
            vulnerability_status="VULNERABLE",
            risk_score_evolution=[],
            remediation_applied=[],
            max_cycles=options.get("max_cycles", 5),
            auto_apply_patches=options.get("auto_apply_patches", False)
        )
        
        # Sauvegarde du contexte
        self._save_context(context)
        
        print(f"‚úÖ Contexte d'audit initialis√© (ID: {context.audit_id})")
        return context
    
    def _save_context(self, context: AuditContext):
        """Sauvegarde le contexte dans un fichier"""
        context_file = f"audit_reports/audit_context_{context.audit_id}.json"
        with open(context_file, 'w') as f:
            json.dump(context.to_dict(), f, indent=2)
    
    def get_or_create_agent(self, agent_type: str):
        """R√©cup√®re ou cr√©e un agent (avec cache)"""
        if agent_type not in self.agents_cache:
            print(f"ü§ñ Initialisation de l'agent {agent_type}...")
            
            config = self.env_manager.get_agent_config(agent_type)
            
            if agent_type == "vulnerability_analyzer":
                # Import et instanciation de VulnerabilityAnalyzerAgent
                # (En supposant que les classes sont disponibles)
                from notebook_05_agent_analyzer_revamped import VulnerabilityAnalyzerAgent
                self.agents_cache[agent_type] = VulnerabilityAnalyzerAgent(
                    model_name=config["model_name"],
                    vulhub_db_path=config["vulhub_db_path"]
                )
                
            elif agent_type == "red_team":
                from notebook_07_agent_red_team import RedTeamAgent
                self.agents_cache[agent_type] = RedTeamAgent(
                    model_name=config["model_name"],
                    enhanced_db_path=config["enhanced_db_path"]
                )
                
            elif agent_type == "blue_team":
                from notebook_08_agent_blue_team import BlueTeamAgent
                self.agents_cache[agent_type] = BlueTeamAgent(
                    model_name=config["model_name"]
                )
        
        return self.agents_cache[agent_type]
    
    def execute_analysis_phase(self, context: AuditContext) -> bool:
        """Ex√©cute la phase d'analyse de vuln√©rabilit√©"""
        print("\nüéØ PHASE 1: ANALYSE DE VULN√âRABILIT√â")
        print("-" * 40)
        
        try:
            # R√©cup√©ration de l'agent
            analyzer = self.get_or_create_agent("vulnerability_analyzer")
            
            # Ex√©cution de l'analyse
            analysis_result = analyzer.run(context.vulhub_id, context.target_address)
            
            if analysis_result.get('status') == 'SUCCESS':
                context.analysis_reports.append(analysis_result)
                
                # Mise √† jour du score de risque
                confidence = analysis_result.get('analysis_report', {}).get('confidence_score', 0.5)
                context.risk_score_evolution.append(confidence * 100)
                
                print("‚úÖ Phase d'analyse termin√©e avec succ√®s")
                return True
            else:
                print(f"‚ùå √âchec de la phase d'analyse: {analysis_result.get('error', 'Erreur inconnue')}")
                return False
                
        except Exception as e:
            print(f"‚ùå Erreur dans la phase d'analyse: {e}")
            return False
    
    def execute_red_team_phase(self, context: AuditContext) -> bool:
        """Ex√©cute la phase Red Team"""
        print("\nüî¥ PHASE 2: EXPLOITATION RED TEAM")
        print("-" * 40)
        
        try:
            # R√©cup√©ration de l'agent
            red_team = self.get_or_create_agent("red_team")
            
            # Sauvegarde du dernier rapport d'analyse pour l'agent Red Team
            latest_analysis = context.get_latest_analysis()
            if not latest_analysis:
                print("‚ùå Aucun rapport d'analyse disponible")
                return False
            
            analysis_file = f"audit_reports/analysis_cycle_{context.total_cycles + 1}.json"
            with open(analysis_file, 'w') as f:
                json.dump(latest_analysis, f, indent=2)
            
            # Ex√©cution de l'exploitation
            target_info = {
                "target_address": context.target_address,
                "vulhub_id": context.vulhub_id
            }
            
            exploitation_result = red_team.run(analysis_file, target_info)
            
            if exploitation_result.get('status') == 'SUCCESS':
                context.exploitation_reports.append(exploitation_result)
                
                print("‚úÖ Phase Red Team termin√©e avec succ√®s")
                return True
            else:
                print(f"‚ùå √âchec de la phase Red Team: {exploitation_result.get('error', 'Erreur inconnue')}")
                return False
                
        except Exception as e:
            print(f"‚ùå Erreur dans la phase Red Team: {e}")
            return False
    
    def execute_blue_team_phase(self, context: AuditContext) -> bool:
        """Ex√©cute la phase Blue Team"""
        print("\nüîµ PHASE 3: D√âFENSE BLUE TEAM")
        print("-" * 40)
        
        try:
            # R√©cup√©ration de l'agent
            blue_team = self.get_or_create_agent("blue_team")
            
            # V√©rification des rapports n√©cessaires
            latest_analysis = context.get_latest_analysis()
            latest_exploitation = context.get_latest_exploitation()
            
            if not latest_analysis or not latest_exploitation:
                print("‚ùå Rapports d'analyse ou d'exploitation manquants")
                return False
            
            # Sauvegarde des rapports pour l'agent Blue Team
            analysis_file = f"audit_reports/analysis_cycle_{context.total_cycles + 1}.json"
            exploitation_file = f"audit_reports/exploitation_cycle_{context.total_cycles + 1}.json"
            
            with open(analysis_file, 'w') as f:
                json.dump(latest_analysis, f, indent=2)
            
            with open(exploitation_file, 'w') as f:
                json.dump(latest_exploitation, f, indent=2)
            
            # Ex√©cution de l'analyse d√©fensive
            defense_result = blue_team.run(analysis_file, exploitation_file)
            
            if defense_result.get('status') == 'SUCCESS':
                context.defense_reports.append(defense_result)
                
                # Application automatique des patches si configur√©
                if context.auto_apply_patches:
                    self._apply_recommended_patches(context, defense_result)
                
                print("‚úÖ Phase Blue Team termin√©e avec succ√®s")
                return True
            else:
                print(f"‚ùå √âchec de la phase Blue Team: {defense_result.get('error', 'Erreur inconnue')}")
                return False
                
        except Exception as e:
            print(f"‚ùå Erreur dans la phase Blue Team: {e}")
            return False
    
    def _apply_recommended_patches(self, context: AuditContext, defense_result: Dict[str, Any]):
        """Applique automatiquement les patches recommand√©s"""
        print("üîß Application automatique des patches...")
        
        defense_report = defense_result.get('defense_report', {})
        recommendations = defense_report.get('defense_recommendations', [])
        
        applied_patches = []
        
        for rec in recommendations:
            if rec.get('priority') == 'IMMEDIATE' and rec.get('category') == 'PATCH':
                patch_title = rec.get('title', 'Patch inconnu')
                print(f"  üîß Application: {patch_title}")
                
                # Simulation de l'application du patch
                # En r√©alit√©, ceci interfacerait avec les syst√®mes de gestion de configuration
                time.sleep(2)  # Simulation
                
                applied_patches.append(patch_title)
                print(f"  ‚úÖ Patch appliqu√©: {patch_title}")
        
        context.remediation_applied.extend(applied_patches)
        
        if applied_patches:
            print(f"‚úÖ {len(applied_patches)} patch(es) appliqu√©(s) automatiquement")
        else:
            print("‚ÑπÔ∏è Aucun patch automatique disponible")
    
    def evaluate_vulnerability_status(self, context: AuditContext) -> str:
        """√âvalue si la vuln√©rabilit√© a √©t√© corrig√©e"""
        print("\nüìä √âVALUATION DU STATUT DE VULN√âRABILIT√â")
        print("-" * 40)
        
        latest_defense = context.get_latest_defense()
        
        if not latest_defense:
            return "VULNERABLE"
        
        defense_report = latest_defense.get('defense_report', {})
        risk_assessment = defense_report.get('risk_assessment', {})
        
        # Crit√®res d'√©valuation
        risk_level = risk_assessment.get('risk_level', 'HIGH')
        patches_applied = len(context.remediation_applied)
        
        # Simulation d'un re-test (en r√©alit√©, on relancerait l'agent d'analyse)
        print("üîç Re-test de la vuln√©rabilit√©...")
        time.sleep(2)
        
        if risk_level in ['LOW', 'MEDIUM'] and patches_applied > 0:
            new_status = "SECURED"
            print("‚úÖ Vuln√©rabilit√© corrig√©e avec succ√®s!")
        elif patches_applied > 0:
            new_status = "PARTIALLY_SECURED"
            print("‚ö† Vuln√©rabilit√© partiellement corrig√©e")
        else:
            new_status = "VULNERABLE"
            print("‚ùå Vuln√©rabilit√© toujours pr√©sente")
        
        context.vulnerability_status = new_status
        return new_status
    
    def execute_audit_cycle(self, context: AuditContext) -> bool:
        """Ex√©cute un cycle complet d'audit"""
        context.total_cycles += 1
        cycle = context.total_cycles
        
        print(f"\n{'üîÑ'*20}")
        print(f"üîÑ D√âBUT DU CYCLE {cycle}")
        print(f"{'üîÑ'*20}")
        
        # Phase 1: Analyse
        self.ui.display_phase_transition(context.current_phase, AuditPhase.ANALYSIS, cycle)
        context.current_phase = AuditPhase.ANALYSIS
        
        if not self.execute_analysis_phase(context):
            context.current_phase = AuditPhase.FAILED
            return False
        
        # Phase 2: Red Team
        self.ui.display_phase_transition(context.current_phase, AuditPhase.RED_TEAM, cycle)
        context.current_phase = AuditPhase.RED_TEAM
        
        if not self.execute_red_team_phase(context):
            context.current_phase = AuditPhase.FAILED
            return False
        
        # Phase 3: Blue Team
        self.ui.display_phase_transition(context.current_phase, AuditPhase.BLUE_TEAM, cycle)
        context.current_phase = AuditPhase.BLUE_TEAM
        
        if not self.execute_blue_team_phase(context):
            context.current_phase = AuditPhase.FAILED
            return False
        
        # √âvaluation
        self.ui.display_phase_transition(context.current_phase, AuditPhase.EVALUATION, cycle)
        context.current_phase = AuditPhase.EVALUATION
        
        new_status = self.evaluate_vulnerability_status(context)
        
        # Affichage du r√©sum√© du cycle
        self.ui.display_cycle_summary(context, cycle)
        
        # Sauvegarde du contexte
        self._save_context(context)
        
        return True
    
    def generate_final_report(self, context: AuditContext) -> Dict[str, Any]:
        """G√©n√®re le rapport final consolid√©"""
        print("\nüìã G√âN√âRATION DU RAPPORT FINAL")
        print("-" * 40)
        
        total_time = datetime.now() - context.start_time
        
        # Compilation des m√©triques
        metrics = {
            "audit_summary": {
                "audit_id": context.audit_id,
                "vulhub_id": context.vulhub_id,
                "target_address": context.target_address,
                "total_cycles": context.total_cycles,
                "total_duration": str(total_time),
                "final_status": context.vulnerability_status,
                "patches_applied": len(context.remediation_applied)
            },
            "cycle_progression": {
                "risk_scores": context.risk_score_evolution,
                "remediation_applied": context.remediation_applied
            },
            "agents_performance": {
                "analysis_runs": len(context.analysis_reports),
                "exploitation_runs": len(context.exploitation_reports),
                "defense_runs": len(context.defense_reports)
            }
        }
        
        # D√©tails des derniers rapports
        latest_reports = {
            "latest_analysis": context.get_latest_analysis(),
            "latest_exploitation": context.get_latest_exploitation(),
            "latest_defense": context.get_latest_defense()
        }
        
        final_report = {
            "metadata": {
                "generated_at": datetime.now().isoformat(),
                "orchestrator_version": "2.0",
                "audit_context": context.to_dict()
            },
            "metrics": metrics,
            "latest_reports": latest_reports,
            "full_history": {
                "analysis_reports": context.analysis_reports,
                "exploitation_reports": context.exploitation_reports,
                "defense_reports": context.defense_reports
            }
        }
        
        # Sauvegarde du rapport final
        report_file = f"audit_reports/final_report_{context.audit_id}.json"
        with open(report_file, 'w') as f:
            json.dump(final_report, f, indent=2)
        
        print(f"‚úÖ Rapport final sauvegard√©: {report_file}")
        return final_report
    
    def display_final_summary(self, context: AuditContext):
        """Affiche le r√©sum√© final de l'audit"""
        total_time = datetime.now() - context.start_time
        
        print(f"\n{'üé≠'*25}")
        print(f"üé≠ R√âSUM√â FINAL DE L'AUDIT {context.audit_id}")
        print(f"{'üé≠'*25}")
        
        print(f"\nüìä STATISTIQUES G√âN√âRALES:")
        print(f"   üéØ Vuln√©rabilit√©: {context.vulhub_id}")
        print(f"   üåê Cible: {context.target_address}")
        print(f"   üîÑ Cycles ex√©cut√©s: {context.total_cycles}")
        print(f"   ‚è±Ô∏è Dur√©e totale: {total_time}")
        print(f"   üõ°Ô∏è Statut final: {context.vulnerability_status}")
        
        print(f"\nüîß REM√âDIATION:")
        if context.remediation_applied:
            for patch in context.remediation_applied:
                print(f"   ‚úÖ {patch}")
        else:
            print("   ‚ùå Aucun patch appliqu√©")
        
        print(f"\nüìà √âVOLUTION DU RISQUE:")
        for i, score in enumerate(context.risk_score_evolution, 1):
            print(f"   Cycle {i}: {score:.1f}%")
        
        # Recommandations finales
        if context.vulnerability_status == "SECURED":
            print(f"\nüéâ SUCC√àS: La vuln√©rabilit√© a √©t√© enti√®rement corrig√©e!")
        elif context.vulnerability_status == "PARTIALLY_SECURED":
            print(f"\n‚ö† PARTIEL: La vuln√©rabilit√© a √©t√© partiellement corrig√©e.")
            print(f"   üí° Recommandation: Continuer la rem√©diation manuelle.")
        else:
            print(f"\n‚ùå √âCHEC: La vuln√©rabilit√© persiste.")
            print(f"   üí° Recommandation: Intervention manuelle requise.")
    
    def run(self) -> Optional[Dict[str, Any]]:
        """M√©thode principale de l'orchestrateur"""
        try:
            # Banni√®re de bienvenue
            self.ui.welcome_banner()
            
            # Validation de l'environnement
            if not self.validate_environment():
                print("‚ùå Impossible de continuer sans un environnement valide")
                return None
            
            # R√©cup√©ration des informations cible
            vulhub_id, target_address = self.ui.get_target_information()
            if not vulhub_id or not target_address:
                return None
            
            # Options d'audit
            audit_options = self.ui.get_audit_options()
            
            # Initialisation du contexte
            context = self.initialize_audit_context(vulhub_id, target_address, audit_options)
            self.current_context = context
            
            # Boucle principale d'audit
            while (context.vulnerability_status == "VULNERABLE" and 
                   context.total_cycles < context.max_cycles):
                
                # Ex√©cution d'un cycle
                if not self.execute_audit_cycle(context):
                    print("‚ùå √âchec du cycle d'audit")
                    break
                
                # V√©rification de la condition d'arr√™t
                if context.vulnerability_status in ["SECURED", "PARTIALLY_SECURED"]:
                    print("‚úÖ Objectif de s√©curisation atteint!")
                    break
                
                # Confirmation pour continuer
                if context.total_cycles < context.max_cycles:
                    continue_audit = questionary.confirm(
                        f"Vuln√©rabilit√© toujours pr√©sente. Continuer le cycle {context.total_cycles + 1} ?"
                    ).ask()
                    
                    if not continue_audit:
                        print("üõë Audit arr√™t√© par l'utilisateur")
                        break
            
            # Finalisation
            context.current_phase = AuditPhase.COMPLETED
            final_report = self.generate_final_report(context)
            self.display_final_summary(context)
            
            return final_report
            
        except KeyboardInterrupt:
            print("\nüõë Audit interrompu par l'utilisateur")
            if self.current_context:
                self._save_context(self.current_context)
            return None
        
        except Exception as e:
            print(f"\n‚ùå Erreur inattendue dans l'orchestrateur: {e}")
            if self.current_context:
                self._save_context(self.current_context)
            return None

print("‚úÖ IntelligentOrchestrator complet d√©fini")

# %%
# Point d'entr√©e principal
def main():
    """Point d'entr√©e principal de l'orchestrateur"""
    orchestrator = IntelligentOrchestrator()
    
    try:
        final_report = orchestrator.run()
        
        if final_report:
            print(f"\nüéâ AUDIT TERMIN√â AVEC SUCC√àS!")
            print(f"üìã Rapport final disponible dans le r√©pertoire audit_reports/")
        else:
            print(f"\n‚ö† Audit termin√© sans rapport final")
            
    except Exception as e:
        print(f"\nüí• Erreur fatale: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()

# %%
print("üé≠ ORCHESTRATEUR INTELLIGENT PR√äT!")
print("Ex√©cutez la cellule main() pour d√©marrer l'audit interactif.")
