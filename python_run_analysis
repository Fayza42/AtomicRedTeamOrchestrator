#!/usr/bin/env python3
"""
Simple Analysis Runner
One-command solution to generate attack analysis from your CSV and log files
"""

import os
import sys
from pathlib import Path

def main():
    print("ATTACK ANALYSIS FROM CSV AND LOGS")
    print("=" * 50)
    
    # Check current directory
    csv_files = list(Path(".").glob("*.csv"))
    log_files = list(Path(".").glob("*.log"))
    
    print(f"Current directory: {Path('.').absolute()}")
    print(f"CSV files found: {len(csv_files)}")
    print(f"Log files found: {len(log_files)}")
    
    if csv_files:
        print("CSV files:")
        for csv_file in csv_files:
            print(f"  - {csv_file.name}")
    
    if not csv_files:
        print("ERROR: No CSV files found!")
        print("Make sure your Invoke-AtomicTest CSV output is in the current directory.")
        return
    
    print("\nRunning analysis workflow...")
    
    # Import and run the modules directly to avoid subprocess issues
    try:
        print("\nStep 1: Parsing CSV and generating comprehensive analysis...")
        sys.path.append('.')
        
        # Import the generator
        from log_csv_report_generator import LogCSVReportGenerator
        
        # Use the first CSV file
        csv_file = str(csv_files[0])
        print(f"Using CSV file: {csv_file}")
        
        # Generate comprehensive report
        generator = LogCSVReportGenerator()
        report = generator.generate_comprehensive_report(csv_file)
        
        if report:
            # Print summary
            generator.print_summary_report(report)
            
            # Save comprehensive report
            comprehensive_file = generator.save_report(report)
            
            print(f"\nStep 2: Converting to compatible format...")
            
            # Import and run converter
            from report_format_converter import convert_to_compatible_format
            import json
            from datetime import datetime
            
            # Convert to compatible format
            compatible_report = convert_to_compatible_format(report)
            
            # Save compatible report
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            compatible_file = f"compatible_attack_report_{timestamp}.json"
            
            with open(compatible_file, 'w') as f:
                json.dump(compatible_report, f, indent=2)
            
            print(f"Compatible report saved: {compatible_file}")
            
            print(f"\nStep 3: Testing with your existing analyzer...")
            
            # Test with existing analyzer if available
            if Path("report_analyzer.py").exists():
                print("Found report_analyzer.py - testing compatibility...")
                
                try:
                    import subprocess
                    result = subprocess.run([sys.executable, "report_analyzer.py", "--report", compatible_file, "--summary"],
                                           capture_output=True, text=True, timeout=30)
                    
                    if result.returncode == 0:
                        print("SUCCESS: Your existing analyzer works!")
                        print("\nAnalyzer output preview:")
                        lines = result.stdout.strip().split('\n')
                        for line in lines[:10]:
                            if line.strip():
                                print(f"  {line}")
                    else:
                        print("NOTICE: Analyzer ran with warnings, but report is valid")
                
                except Exception as e:
                    print(f"Could not test analyzer: {e}")
            else:
                print("report_analyzer.py not found in current directory")
            
            print(f"\n" + "=" * 60)
            print("ANALYSIS COMPLETE")
            print("=" * 60)
            
            print(f"\nGenerated files:")
            print(f"  1. Comprehensive analysis: {comprehensive_file}")
            print(f"  2. Compatible report: {compatible_file}")
            
            print(f"\nTo use with your existing analyzer:")
            print(f"  python report_analyzer.py --report {compatible_file}")
            print(f"  python report_analyzer.py --auto")
            
            print(f"\nYour attack summary:")
            summary = report.get('executive_summary', {}).get('attack_overview', {})
            print(f"  - Techniques attempted: {summary.get('total_techniques_attempted', 0)}")
            print(f"  - Successful techniques: {summary.get('successful_techniques', 0)}")
            print(f"  - Success rate: {summary.get('overall_success_rate', 0):.1f}%")
            print(f"  - Duration: {summary.get('attack_duration', 'Unknown')}")
            
            # Show key vulnerabilities
            vuln_analysis = report.get('vulnerability_analysis', {})
            vulnerabilities = vuln_analysis.get('vulnerabilities_exploited', [])
            if vulnerabilities:
                print(f"\nKey vulnerabilities exploited:")
                for vuln in vulnerabilities[:5]:  # Show first 5
                    print(f"  - {vuln}")
            
        else:
            print("ERROR: Failed to generate comprehensive analysis")
    
    except ImportError as e:
        print(f"ERROR: Could not import required modules: {e}")
        print("Make sure all analysis scripts are in the current directory")
    
    except Exception as e:
        print(f"ERROR: Analysis failed: {e}")
        print("\nTry running the individual scripts:")
        print("  1. python log_csv_report_generator.py")
        print("  2. python report_format_converter.py")

if __name__ == "__main__":
    main()
