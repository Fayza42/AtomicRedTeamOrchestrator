def _clean_json_output(self, raw_output):
        # Cherche un bloc de code JSON, potentiellement avec des ```json au début
        match = re.search(r'```json\s*(\{.*?\})\s*```', raw_output, re.DOTALL)
        if not match:
            # Si pas de bloc de code, cherche le premier '{' jusqu'au dernier '}'
            match = re.search(r'(\{.*\})', raw_output, re.DOTALL)

        if not match:
            print("✗ [Parser] Aucun bloc JSON n'a pu être trouvé dans la réponse du LLM.")
            return {"error": "Format JSON non trouvé dans la réponse du LLM", "raw": raw_output}
        
        json_str = match.group(1)
        try:
            # Le JSON est trouvé, on essaie de le charger
            return json.loads(json_str)
        except json.JSONDecodeError as e:
            print(f"✗ [Parser] Erreur de décodage JSON : {e}")
            return {"error": "Impossible de décoder le JSON fourni par le LLM", "json_candidate": json_str}
